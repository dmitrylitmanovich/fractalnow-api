continue
p asm
asm = request.body.read
p asm
asm = request.body
request.body.read
request.body
exit
c
config_file.open.read
config_file.path
config_file
config
c
continue
      content = Tempfile.open(output_file.path).read
output_file.read
content
      content = Tempfile.open(output_file.path).read
output_file.read
output_file.path
      content = Tempfile.open(output_file.path).read
Open3.popen3(
        "fractalnow -x 3840 -y 2160 -c #{config_file.path} -o #{output_file.path}",
        err: :out) do |stdin, stdout, stderr|
        output = stdout.read
      end
streamo
streamo = Open3.popen3(
        'fractalnow',
        "-x 3840 -y 2160 -c #{config_file.path} -o #{output_file.path}",
        err: :out) do |stdin, stdout, stderr|
        output = stdout.read
      end
Open3.popen3(
        'fractalnow',
        "-x 3840 -y 2160 -c #{config_file.path} -o #{output_file.path}",
        err: :out) do |stdin, stdout, stderr|
        output = stdout.read
      end
config_file.open.read
config_file
continue
Open3.popen3('ls', '-uhh', :err => :out) { |stdin, stdout, stderr|
  asm = stdout.read
}e
asm
Open3.popen3('ls', '-uhh', :err => :out) { |stdin, stdout, stderr|
  asm = stdout.read
}
asm = ''
Open3.popen3('ls', '-uhh', :err => :out) { |stdin, stdout, stderr|
  puts stdout.read
}
require 'open3'
process = spawn("fractalnow -x 3840 -y 2160 -c #{config_file.path} -o #{output_file.path}", out: stdout)
process = Process.new("fractalnow -x 3840 -y 2160 -c #{config_file.path} -o #{output_file.path}", out: stdout)
output_file.path
output_file
config_file.open.read
config_file.read
config_file.path
c63c9af87ddc9
stdout
exit()
file.open.read
file.read
file.close
file.read
file.open.write(config)
file.open
file.read
file.close
file.read
file.path
file
continue
config_file.read
config_file
continue
amw.open.read
amw.open
amw.close
amw.write('asm')
amw.read
amw.write('asm')
amw.read
amw.path
amw = Tempfile.new('asm')
Tempfile
require "tempfile"
asm
asm = config_file_create(config)
def config_file_create(config)
      File.open("./config.config", "w+b") do |file|
        file.write(config)
      end
    end
fractal_file_create
asm.file
asm
asm = config_file_create(config)
